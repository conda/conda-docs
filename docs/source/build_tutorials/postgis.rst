Tutorial: Building the PostGIS package
==========================================

Overview
--------

Let's set out to build ``postgis``. This package is installable with conda if you
have access to an appropriate channel, so we are not flying blind. But we'll
start out naively and try to learn some things along the way.

We will build ``postgis`` 2.1.3 (the current version as of 14th of July 2014).

The step-by-step sequence is fairly repetitive in the sense that there are only
a few sequences of actions you must take to build conda packages, although you
may have to repeat them multiple times to build a package with many
dependencies. You'll see once we get into the steps. First, let's lay out the
abstract game plan. Understanding what we have to accomplish will demystify the
process considerably.

We will build this package for 64-bit Linux, but the steps generalize to other
platforms.

Abstract Description of conda build
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We begin building a package by pointing conda to a directory with a ``build.sh``
(for Linux and OS X, Windows uses ``bld.bat`` file) and ``meta.yaml`` file.
Respectively, these files specify the command line instructions to build a
particular package from source, and information about where to download the
source files and dependencies that the package requires. If these files are
configured correctly,

.. code-block:: bash

    $ conda build postgis/

obtains the source files from the location specified in ``meta.yaml`` and,
following the commands in ``build.sh``, builds the package locally. Once
complete, the package and all its metadata bundled. We will upload it to
`Anaconda.org <http://anaconda.org/>`_, where it can be accessed via:

.. code-block:: bash

    $ conda search
    $ conda install

Here, we'll start out naively and make adjustments to the ``build.sh`` and
``meta.yaml`` files as we go, until the package is successfully built.

Build Steps
-----------

Initial Setup
^^^^^^^^^^^^^

Locate source files for the package you want to build. In this case, I found a
``postgis``
`tarball <http://download.osgeo.org/postgis/source/postgis-2.1.3.tar.gz>`_ here.
Reading the documentation, I can already see there are dependencies, but for
the purposes of illustrating the steps, we will start at zero and see how far
we get.

Create a directory where conda build will find the ``build.sh`` and ``meta.yaml``
files. Create files with the following bare-bones contents (appropriate to the
package you are tyring to build):

.. code-block:: bash

    $ mkdir postgis
    $ touch postgis/build.sh postgis/meta.yaml
    $ ls
    build.sh  meta.yaml

Now setup ``postgis/build.sh`` like this:

.. code-block:: bash

    ./configure --prefix=$PREFIX
    make
    make install

This is the minimal set of commands that might build a package from source
that was created with autotools (autoconf, automake, etc), the standard format
you'll encounter for packaging C source code distributions. Including
``--prefix=$PREFIX`` here tells ``configure`` to set the installation path to
``$PREFIX``, an environment variable set by conda during runtime. This is a
key instruction to have conda configure and install in its custom build
environment, rather than try to access root-level directories such as
``/usr``, which is the default installation path in normal circumstances in
Linux and OS X. If you want to follow more details of what conda is doing
to configure the environment, add to your ``build.sh`` file:

.. code-block:: bash

    echo $PREFIX

The basic ``meta.yaml`` file looks like this:

.. code-block:: yaml

    package:
      name: postgis

    source:
      fn: postgis-2.1.3.tar.gz
      url: http://download.osgeo.org/postgis/source/postgis-2.1.3.tar.gz

    # requirements:
      # build:

      # run:

    build:
      number: 0

    about:
      home: http://postgis.net
      license: GPL2
      summary: "PostGIS is a spatial database extender for PostgreSQL object-relational database. It adds support for geographic objects allowing location queries to be run in SQL."

The dependencies will be listed under the requirements key, but that is
commented out for now as we are assuming no dependencies at first.

First Build Attempt
^^^^^^^^^^^^^^^^^^^

Run

.. code-block:: bash

    $ conda build postgis

If you are familiar building packages from source, you will recognize the log
generated by the configure script. The first error message I encounter is:

.. code-block:: bash

    configure: error: could not find pg_config within the current path.
    You may need to try re-running configure with a --with-pg_config parameter.

I'm being asked to specify a path to the utility ``pg_config``. I do ``$ which
pg_config`` and find that it's not installed. The philosophy of conda packaging
is that you bundle what you need, so this utility has to be included in the
package. I do:

Some searching indicates pg_config is distributed with postgresql, so let me
check that out. A search on `Anaconda.org <https://anaconda.org/>`__ for conda
packages with the name ``postgresql`` yields some results for 64-bit
Linux. I'll try to install from one of the Anaconda.org channels. First the channel
must be added with:

.. code-block:: bash

    $ conda config --add channels https://conda.anaconda.org/trent

which I can verify by inspecting:

.. code-block:: bash

    $ conda info

                 platform : linux-64
            conda version : 3.5.2
           python version : 2.7.7.final.0
         root environment : /home/irritum/miniconda  (writable)
      default environment : /home/irritum/miniconda
         envs directories : /home/irritum/miniconda/envs
            package cache : /home/irritum/miniconda/pkgs
             channel URLs : https://conda.anaconda.org/trent/linux-64
                            http://repo.continuum.io/pkgs/free/linux-64/
                            http://repo.continuum.io/pkgs/pro/linux-64/
                            http://repo.continuum.io/pkgs/gpl/linux-64/
                            https://conda.anaconda.org/mutirri/linux-64/
              config file : /home/irritum/.condarc
        is foreign system : False

Now I can return to the build of ``postgis``. I know that ``postgresql`` (and
specifically the need for ``pg_config``) is a dependency, so I should include that
in the ``meta.yaml`` file and add the flag ``--with-pgconfig`` to the configure
command, as the script requested.  It will be needed both to build the
package, and to run the package after it is built, so we need to add it as
both a build and run dependency.

.. code-block:: yaml

    package:
      name: postgis

    source:
      fn: postgis-2.1.3.tar.gz
      url: http://download.osgeo.org/postgis/source/postgis-2.1.3.tar.gz

    build:
      number: 0

    requirements:
      build:
        - postgresql
      run:
        - postgresql

    about:
      home: http://postgis.net
      license: GPL2

My build.sh now looks like

.. code-block:: bash

   ./configure --prefix=$PREFIX --with-pgconfig=$PREFIX/bin/pg_config
   make
   make install

I have added the flag ``--with-pgconfig=${PREFIX}/bin/pg_config`` to the
configure command in ``build.sh``.

ERROR - geos-config
^^^^^^^^^^^^^^^^^^^

The next error encountered is:

.. code-block:: none

    checking for geos-config... no

    configure: error: could not find geos-config within the current path. You may need to try re-running configure with a --with-geosconfig parameter.

On the other hand:

.. code-block:: bash

    $ conda search geos

does not turn up an available package at this moment, so I will build
this from source, following the same routine we've done a couple times now:

.. code-block:: bash

    $ mkdir geos
    $ cd geos
    $ cp postgis/meta.yaml geos/

    $ cp postgis/build.sh geos/


I edit the ``meta.yaml`` and ``build.sh`` files to reflect the details of this package (no dependencies or special flags set):

.. code-block:: bash

    $ conda build geos
    $ binstar upload /home/irritum/code/miniconda/conda-bld/linux-64/geos-3.4.2-0.tar.bz2

after the package is successfully built.

I can continue, after adding the dependencies in ``meta.yaml`` of
``postgis``. At this point the conda recipe files look like this:

.. code-block:: yaml

    package:
      name: postgis

    source:
      fn: postgis-2.1.3.tar.gz
      url: http://download.osgeo.org/postgis/source/postgis-2.1.3.tar.gz

    build:
      number: 0

    requirements:
      build:
        - postgresql
        - geos
      run:
        - postgresql
        - geos

    about:
      home: http://postgis.net
      license: GPL2

And ``build.sh`` file:

.. code-block:: bash

    ./configure \
        --prefix=$PREFIX \
        --with-pgconfig=$PREFIX/bin/pg_config \
        --with-geosconfig=$PREFIX/bin/geos-config \

    make
    make install

A Reminder
""""""""""

As you go through this cycle of steps, remember to update the conda build
recipes to reflect the dependencies that you are installing. Conda build
builds the package in an isolated environment, which is created from the
packages specified as build dependencies.  Installing the packages into your
own working environment does not affect conda-build at all. For example, if
you have installed a geos package but not specified the requirement in
``meta.yaml`` or the path flag in ``build.sh``, you will see an error like
this:

.. code-block:: bash

    configure: error: could not find libgeos_c - you may need to specify the directory of a geos-config file using --with-geosconfig

ERROR - proj
^^^^^^^^^^^^

The next error I hit is

.. code-block:: bash

    configure: error: could not find proj_api.h - you may need to specify the directory of a PROJ.4 installation using --with-projdir

Build proj
^^^^^^^^^^

``proj`` 4.8.0 can be built from source in the same way. It should not have
non-standard dependencies. I uploaded my package as ``proj``. I include ``-
proj`` under the build and run requirements in ``meta.yaml`` and add the flag
``--with-projdir=$PREFIX`` in ``build.sh`` file.

At this point the series of dependencies I have assembled is reflected by the conda build script's output:

.. code-block:: bash


    package                    |            build
    ---------------------------|-----------------
    geos-3.4.2                 |                0   hard-link
    postgresql-9.3.4           |                0   hard-link
    proj-4.8.0                 |                0   hard-link
    zlib-1.2.7                 |                0   hard-link

ERROR - gdal
^^^^^^^^^^^^

Next I encountered:

.. code-block:: bash

    checking for gdal-config... no

    checking GDAL version... not found

    configure: error: gdal-config not found. Use --without-raster or try --with-gdalconfig=<path to gdal-config>

Is this package available?

.. code-block:: bash

    $ conda search gdal
    Fetching package metadata: ......

    gdal                         1.10.1                   py33_0  defaults
                                 1.10.1                   py27_0  defaults
                                 1.10.1                   py26_0  defaults
                                 1.10.1               np18py34_2  defaults
                                 1.10.1               np18py33_2  defaults
                              .  1.10.1               np18py27_2  defaults
                                 1.10.1               np18py26_2  defaults

Yes, so I include ``- gdal`` as a build and run requirement in ``meta.yaml``, as
well as add the flag ``--with-gdalconfig=$PREFIX/bin`` in ``build.sh`` file.

ERROR - json-c
^^^^^^^^^^^^^^

.. code-block:: bash

    configure: error: Cannot find json dev files in "/home/irritum/miniconda/envs/_build"

After doing some research (mostly documentation of ``postgis``), I have found
that I need a ``json-c`` package. So, once again:

.. code-block:: bash

    $ conda search json-c
    Fetching package metadata: ...............

    json-c                       0.11.20130402                 0  trent

Notice that in my ``.condarc`` file I have trent channel, where ``json-c`` is available.
I'm going to use it, so I add:

.. code-block:: bash

    --with-jsondir=$PREFIX

to ``build.sh`` and

.. code-block:: yaml

    - json-c

to the build and run dependencies.

Now, my ``meta.yaml`` file looks:

.. code-block:: yaml

    package:
      name: postgis

    source:
      fn: postgis-2.1.3.tar.gz
      url: http://download.osgeo.org/postgis/source/postgis-2.1.3.tar.gz

    build:
      number: 0

    requirements:
      build:
        - postgresql
        - geos
        - proj4
        - gdal
        - json-c
      run:
        - postgresql
        - geos
        - proj4
        - gdal
        - json-c

    about:
      home: http://postgis.net
      license: GPL2

And ``build.sh``:

.. code-block:: bash


    ./configure \
        --prefix=$PREFIX \
        --with-pgconfig=$PREFIX/bin/pg_config \
        --with-geosconfig=$PREFIX/bin/geos-config \
        --with-projdir=$PREFIX \
        --with-jsondir=$PREFIX

    make
    make install

ERROR - libxml2
^^^^^^^^^^^^^^^

Try again:

.. code-block:: bash

    $ conda build postgis

The next error message from ``configure`` is:

.. code-block:: bash

    checking for xml2-config... no

    configure: error: could not find xml2-config from libxml2 within the current path. You may need to try re-running configure with a --with-xml2config parameter.

I need to include the ``libxml2`` package. See if it's available:

.. code-block:: bash

    $ conda search libxml2
    Fetching package metadata: ......

I accordingly update the ``meta.yaml`` file to include ``- libxml2`` and add
``--with-xml2config=$PREFIX/bin/xml2-config`` to the ``build.sh`` file and re-run whole process one more time:

.. code-block:: bash

    $ conda build postgis

Final step
^^^^^^^^^^

Finally I'm adding some interesting options (from my point of view) to the ``build.sh`` file:

.. code-block:: bash

    --with-libiconv=$PREFIX \
    --with-raster \
    --with-topology


My final ``meta.yaml`` is

.. code-block:: yaml

   package:
     name: postgis
     version: 2.1.1

   source:
     fn: postgis-2.1.1.tar.gz
     url: http://download.osgeo.org/postgis/source/postgis-2.1.1.tar.gz

   build:
     number: 0

   requirements:
     build:
       - gdal
       - geos
       - proj4
       - json-c
       - libxml2
       - postgresql
     run:
       - gdal
       - geos
       - proj4
       - json-c
       - libxml2
       - postgresql

   about:
     home: http://postgis.net
     license: GPL2

And my ``build.sh`` is

.. code-block:: bash

  chmod 755 configure
  ./configure \
      --prefix=$PREFIX \
      --with-pgconfig=$PREFIX/bin/pg_config \
      --with-gdalconfig=$PREFIX/bin/gdal-config \
      --with-xml2config=$PREFIX/bin/xml2-config \
      --with-projdir=$PREFIX \
      --with-libiconv=$PREFIX \
      --with-jsondir=$PREFIX \
      --with-raster \
      --with-topology

  make
  make install

And that's all.

.. code-block:: bash

    $ conda build postgis/
    ...

    patchelf: file: /home/gergely/code/miniconda/envs/_build/bin/pgsql2shp
        setting rpath to: $ORIGIN/../lib

    patchelf: file: /home/gergely/code/miniconda/envs/_build/bin/raster2pgsql
        setting rpath to: $ORIGIN/../lib

    patchelf: file: /home/gergely/code/miniconda/envs/_build/bin/shp2pgsql
        setting rpath to: $ORIGIN/../lib

    patchelf: file: /home/gergely/code/miniconda/envs/_build/lib/liblwgeom-2.1.3.so
        setting rpath to: $ORIGIN/.
    patchelf: file: /home/gergely/code/miniconda/envs/_build/lib/postgresql/postgis-2.1.so
        setting rpath to: $ORIGIN/..

    patchelf: file: /home/gergely/code/miniconda/envs/_build/lib/postgresql/rtpostgis-2.1.so
        setting rpath to: $ORIGIN/..

    BUILD END: postgis-2.1.3-0
    Nothing to test for: postgis-2.1.3-0
    # If you want to upload this package to Anaconda.org later, type:
    #
    # $ binstar upload /home/mutirri/code/miniconda/conda-bld/linux-32/postgis-2.1.3-0.tar.bz2
    #
    # To have conda build upload to Anaconda.org automatically, use
    # $ conda config --set binstar_upload yes

If you'd methodically followed along, you now have a ``postgis`` package you
can upload using the command shown at the end of the build and install. Along
the way, you've created several other conda packages that may be useful in
their own right.

Please consider sending pull requests for your own conda recipes to the
`conda-recipes repository <https://github.com/conda/conda-recipes>`_
repository.
